use crate::cloudflare;
use crate::cloudflare::models::{Record, Zone};
use crate::config::models::ConfigOpts;
use crate::inventory::models::InventoryData;
use anyhow::{Context, Result};
use chrono::Local;
use tracing::{trace, warn};

/// A post-processor for data output, modifying content inplace.
pub trait PostProcessor {
    fn post_process(&self, contents: &mut String) -> Result<()>;
}

/// A post-processor prefixes a timestamp header to the beginning of the data.
pub struct TimestampPostProcessor;
impl PostProcessor for TimestampPostProcessor {
    fn post_process(&self, contents: &mut String) -> Result<()> {
        trace!("starting post-processing: timestamp");
        // Inject header
        let header = format!(
            r#"# This file was automatically @generated by cddns.
# last-modified: {}

"#,
            Local::now()
        );
        contents.insert_str(0, &header);
        trace!("finished post-processing: inventory aliases");
        Ok(())
    }
}

/// A post-processor annotates each inventory item with friendly aliases to zone
/// and records.
pub struct InventoryAliasCommentPostProcessor {
    zones: Vec<Zone>,
    records: Vec<Record>,
}
impl InventoryAliasCommentPostProcessor {
    /// Initialize the inventory alias post-processor.
    pub async fn try_init(opts: &ConfigOpts) -> Result<Self> {
        trace!("starting data retrieval for cloudflare post-processing");
        let token = opts
                    .verify.token.as_ref()
                    .context("no token was provided, need help? see https://github.com/simbleau/cddns#readme")?;
        let zones = cloudflare::endpoints::zones(&token).await?;
        let records = cloudflare::endpoints::records(&zones, &token).await?;
        trace!("finished retrieval of cloudflare post-processing resources");
        Ok(InventoryAliasCommentPostProcessor::from(zones, records))
    }

    pub fn from(zones: Vec<Zone>, records: Vec<Record>) -> Self {
        Self { zones, records }
    }
}

impl PostProcessor for InventoryAliasCommentPostProcessor {
    fn post_process(&self, yaml: &mut String) -> Result<()> {
        trace!("starting post-processing: inventory aliases");
        let data = serde_yaml::from_slice::<InventoryData>(yaml.as_bytes())
            .context("deserializing inventory from bytes")?;

        for (zone_id, record_ids) in data.into_iter() {
            // Post-process zone
            if let Some(zone) =
                crate::cmd::list::find_zone(&self.zones, &zone_id)
            {
                let z_idx =
                    yaml.find(&zone_id).context("zone not found in yaml")?;
                yaml.insert_str(
                    z_idx + zone_id.len() + ":".len(),
                    &format!(
                        " # '{}'",
                        if zone_id == zone.id {
                            zone.name
                        } else {
                            zone.id
                        }
                    ),
                );
            } else {
                warn!(
                    "post-processing '{}' failed: cloudflare zone not found",
                    zone_id
                );
            }

            // Post-process records
            for record_id in record_ids {
                if let Some(record) =
                    crate::cmd::list::find_record(&self.records, &record_id)
                {
                    let r_idx = yaml
                        .find(&record_id)
                        .context("record not found in yaml")?;
                    yaml.insert_str(
                        r_idx + record_id.len(),
                        &format!(
                            " # '{}'",
                            if record_id == record.id {
                                record.name
                            } else {
                                record.id
                            }
                        ),
                    );
                } else {
                    warn!(
                    "post-processing '{}' failed: cloudflare record not found",
                    record_id
                );
                }
            }
        }
        trace!("finished post-processing: inventory aliases");
        Ok(())
    }
}
